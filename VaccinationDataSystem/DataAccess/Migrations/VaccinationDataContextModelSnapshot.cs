// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VaccinationDataSystem.DataAccess;

#nullable disable

namespace VaccinationDataSystem.Migrations
{
    [DbContext(typeof(VaccinationDataContext))]
    partial class VaccinationDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospitalVaccine", b =>
                {
                    b.Property<int>("PlacesOfVaccinationId")
                        .HasColumnType("int");

                    b.Property<int>("VaccinesId")
                        .HasColumnType("int");

                    b.HasKey("PlacesOfVaccinationId", "VaccinesId");

                    b.HasIndex("VaccinesId");

                    b.ToTable("HospitalVaccine");
                });

            modelBuilder.Entity("VaccinationDataSystem.Models.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("VaccinationDataSystem.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HostHospitalId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HostHospitalId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("VaccinationDataSystem.Models.PatientProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMarried")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("PatientProfiles");
                });

            modelBuilder.Entity("VaccinationDataSystem.Models.PatientResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateOfVaccination")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<bool?>("WillVaccine")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("PatientResponses");
                });

            modelBuilder.Entity("VaccinationDataSystem.Models.Vaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Dosage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("PriceForUnit")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ProductionCountry")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("HospitalVaccine", b =>
                {
                    b.HasOne("VaccinationDataSystem.Models.Hospital", null)
                        .WithMany()
                        .HasForeignKey("PlacesOfVaccinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccinationDataSystem.Models.Vaccine", null)
                        .WithMany()
                        .HasForeignKey("VaccinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VaccinationDataSystem.Models.Patient", b =>
                {
                    b.HasOne("VaccinationDataSystem.Models.Hospital", "HostHospital")
                        .WithMany("Patients")
                        .HasForeignKey("HostHospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostHospital");
                });

            modelBuilder.Entity("VaccinationDataSystem.Models.PatientProfile", b =>
                {
                    b.HasOne("VaccinationDataSystem.Models.Patient", "Patient")
                        .WithOne("PatientProfile")
                        .HasForeignKey("VaccinationDataSystem.Models.PatientProfile", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VaccinationDataSystem.Models.PatientResponse", b =>
                {
                    b.HasOne("VaccinationDataSystem.Models.Patient", "Patient")
                        .WithOne("VaccinationResponse")
                        .HasForeignKey("VaccinationDataSystem.Models.PatientResponse", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VaccinationDataSystem.Models.Hospital", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("VaccinationDataSystem.Models.Patient", b =>
                {
                    b.Navigation("PatientProfile");

                    b.Navigation("VaccinationResponse");
                });
#pragma warning restore 612, 618
        }
    }
}
